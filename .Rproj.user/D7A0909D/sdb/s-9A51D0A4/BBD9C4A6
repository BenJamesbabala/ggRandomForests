{
    "contents" : "####**********************************************************************\n####**********************************************************************\n####\n####  GRAMMER OF GRAPHICS FOR RANDOM FORESTS FOR SURVIVAL, REGRESSION,\n####  AND CLASSIFICATION (RF-SRC)\n####  Version 0.5.0\n####\n####  Copyright 2012, Cleveland Clinic Foundation\n####\n####  This program is free software; you can redistribute it and/or\n####  modify it under the terms of the GNU General Public License\n####  as published by the Free Software Foundation; either version 2\n####  of the License, or (at your option) any later version.\n####\n####  This program is distributed in the hope that it will be useful,\n####  but WITHOUT ANY WARRANTY; without even the implied warranty of\n####  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n####  GNU General Public License for more details.\n####\n####  You should have received a copy of the GNU General Public\n####  License along with this program; if not, write to the Free\n####  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n####  Boston, MA  02110-1301, USA.\n####\n####  ----------------------------------------------------------------\n####  Project Partially Funded By: \n####  ----------------------------------------------------------------\n####  ----------------------------------------------------------------\n####  Written by:\n####  ----------------------------------------------------------------\n####    John Ehrlinger, Ph.D.\n####    Assistant Staff\n####    Dept of Quantitative Health Sciences\n####    Learner Research Institute\n####    Cleveland Clinic Foundation\n####\n####    email:  john.ehrlinger@gmail.com\n####    URL:    http://www.kogalur.com\n####  ----------------------------------------------------------------\n####\n####**********************************************************************\n####**********************************************************************\n#'\n#' ggplot.variable Plot randomForestSRC Marginal Effect of Variables using \n#' ggplot2\n#'\n#' @description Plot the marginal effect of an x-variable on the class \n#' probability (classification), response (regression), \n#' mortality (survival), or the expected years lost (competing risk) from \n#' an RF-SRC analysis. \n#' \n#' @param x An object of class (rfsrc, marginal) or (rfsrc, partial) created\n#' by \\code{\\link{pred.variable.rfsrc}}.\n#' @param smooth.lines Use lowess to smooth partial plots.\n#' @param ...\tFurther arguments passed to or from other methods.\n#'\n#' @details The vertical axis displays the ensemble predicted value, while \n#' x-variables are plotted on the horizontal axis.\n#' \n#' @author John Ehrlinger john.ehrlinger@gmail.com\n#' @references \n#' Ishwaran H., Kogalur U.B. (2007). Random survival forests for R, Rnews, 7(2):25-31.\n#' Ishwaran H., Kogalur U.B., Blackstone E.H. and Lauer M.S. (2008). Random survival forests, Ann. App. Statist., 2:841-860.\n#' Ishwaran H., Gerds, T.A. Kogalur U.B., Moore R.D., Gange S.J. and Lau B.M. (2012). Random survival forests for competing risks.\n#' \n#' @seealso rfsrc, predict.rfsrc, plot.variable.rfsrc, pred.variable.rfsrc\n#'\n#' @examples\n#' ## Not run: \n#' ### survival/CR examples\n#' \n#' # survival\n#' data(veteran, package = \"randomForestSRC\") \n#' v.obj <- rfsrc(Surv(time,status)~., veteran, nsplit = 10, ntree = 100)\n#' plot.variable(v.obj, plots.per.page = 3)\n#' plot.variable(v.obj, plots.per.page = 2, xvar.names = c(\"trt\", \"karno\", \"age\"))\n#' plot.variable(v.obj, surv.type = \"surv\", nvar = 1, percentile = 75)\n#' plot.variable(v.obj, surv.type = \"surv\", nvar = 1, time=5) \n#' plot.variable(v.obj, surv.type = \"surv\", partial = TRUE, smooth.lines = TRUE)\n#' plot.variable(v.obj, surv.type = \"rel.freq\", partial = TRUE, nvar = 2)\n#' \n#' # competing risks\n#' data(follic, package = \"randomForestSRC\")\n#' follic.obj <- rfsrc(Surv(time, status) ~ ., follic, nsplit = 3, ntree = 100)\n#' plot.variable(follic.obj, which.outcome = 2)\n#' \n#' ### regression examples\n#' \n#' # airquality\n#' airq.obj <- rfsrc(Ozone ~ ., data = airquality)\n#' plot.variable(airq.obj, partial = TRUE, smooth.lines = TRUE)\n#' \n#' # motor trend cars\n#' mtcars.obj <- rfsrc(mpg ~ ., data = mtcars)\n#' plot.variable(mtcars.obj, partial = TRUE, smooth.lines = TRUE)\n#' \n#' ### classification example\n#' \n#' # iris\n#' iris.obj <- rfsrc(Species ~., data = iris)\n#' plot.variable(iris.obj, partial = TRUE)\n#' \n#' # motor trend cars: predict number of carburetors\n#' mtcars2 <- mtcars\n#' mtcars2$carb <- factor(mtcars2$carb,\n#'                        labels = paste(\"carb\", sort(unique(mtcars$carb))))\n#' mtcars2.obj <- rfsrc(carb ~ ., data = mtcars2)\n#' plot.variable(mtcars2.obj, partial = TRUE)\n#' \n#' ## End(Not run)\n\nggplot.variable.rfsrc <- function(\n  x,\n  smooth.lines = FALSE,\n  ...)\n{\n  call <- match.call()\n  ### check that object is interpretable\n  ### first rename x to object to avoid confusion with x matrix\n  object <- x\n  if (sum(inherits(object, c(\"marginal\", \"rfsrc\"), TRUE) == c(1, 2)) != 2 &\n        sum(inherits(object, c(\"partial\", \"rfsrc\"), TRUE) == c(1, 2)) != 2) {\n    stop(\"Function only works for objects of class '(rfsrc, marginal)' or '(rfsrc, partial)'. These objects are created with the pred.variable function.\")\n  }\n  \n  # assign missing values to key options\n  if(is.null(object$call$percentile)){\n    percentile <- 50\n  }else{\n    percentile <- object$call$percentile\n  }\n  \n  ## process the object depending on the underlying family\n  ##survival families\n  if (grepl(\"surv\", object$family)) {\n    event.info <- object$event.info\n    yvar.dim <- event.info$r.dim\n    cens <- as.factor(event.info$cens)\n    event.type <- event.info$event.type\n    \n    if (percentile > 1) percentile <- percentile / 100\n    if (percentile < 0 | percentile > 1) percentile <- 0.5\n    \n    ## special processing for  CR analysis\n    if (object$family == \"surv-CR\") {\n      if(is.null(object$which.outcome)){\n        which.outcome <- 1\n      }else{\n        which.outcome <- object$which.outcome \n      } \n      if (which.outcome < 1 || which.outcome > max(event.type, na.rm = TRUE)) {\n        stop(\"'which.outcome' is specified incorrectly\")\n      }\n      \n      surv.type <- setdiff(object$call$surv.type, c(\"mort\", \"rel.freq\", \"surv\"))\n      pred.type <- match.arg(surv.type, c(\"years.lost\", \"cif\", \"chf\"))\n      if(is.null(object$call$time)){\n        ylabel <- switch(pred.type,\n                         \"years.lost\" = paste(\"Years lost for event \", which.outcome),\n                         \"cif\" = paste(\"CIF for event \", which.outcome, \" (\", round(100 * percentile), \"%)\", sep = \"\"),\n                         \"chf\" = paste(\"CHF for event \", which.outcome, \" (\", round(100 * percentile), \"%)\", sep = \"\"))\n      }else{\n        ylabel <- switch(pred.type,\n                         \"years.lost\" = paste(\"Years lost for event \", which.outcome),\n                         \"cif\" = paste(\"CIF for event \", which.outcome, sep = \"\"),\n                         \"chf\" = paste(\"CHF for event \", which.outcome, sep = \"\"))\n      }     \n    }\n    else {\n      which.outcome <- 1\n      surv.type <- setdiff(object$call$surv.type, c(\"years.lost\", \"cif\", \"chf\"))\n      pred.type <- match.arg(object$call$surv.type, c(\"mort\", \"rel.freq\", \"surv\"))\n      if(is.null(object$call$time)){\n        ylabel <- switch(pred.type,\n                         \"mort\"      = \"mortality\",\n                         \"rel.freq\"  = \"standardized mortality\",\n                         \"surv\"      = paste(\"predicted survival (\", round(100 * percentile), \"%)\", sep = \"\"))\n      }else{\n        ylabel <- switch(pred.type,\n                         \"mort\"      = \"mortality\",\n                         \"rel.freq\"  = \"standardized mortality\",\n                         \"surv\"      = paste(\"predicted survival\", sep = \"\"))\n      }\n    }\n  }\n  ## classification families\n  else {\n    if (object$family == \"class\") {\n      if (is.null(object$which.outcome)) {\n        which.outcome <- 1\n      }else{\n        which.outcome <- object$which.outcome\n      }\n      if (is.character(which.outcome)) {\n        which.outcome <- match(match.arg(which.outcome, levels(object$yvar)), levels(object$yvar))\n      }\n      else {\n        if (which.outcome > length(levels(object$yvar)) | which.outcome < 1) {\n          stop(\"which.outcome is specified incorrectly: \", which.outcome, \" of \", length(levels(object$yvar)) )\n        }\n      }\n      pred.type <- \"prob\"\n      yvar.dim <- 1\n      ylabel <- paste(\"probability\", levels(object$yhat)[which.outcome])\n    }\n    ## regression families\n    else {\n      pred.type <- \"y\"\n      yvar.dim <- 1\n      ylabel <- expression(hat(y))\n    }\n  }\n  \n  ##--------------------------------------------------------------------------------\n  ##\n  ## Marginal Plots\n  ##\n  ##--------------------------------------------------------------------------------\n  if (is.null(object$call$partial)) {\n    xvar <- object$x\n    n <- nrow(xvar)\n    nvar <- ncol(xvar)\n    yhat <- object$yhat\n    if (n > 500) cex.pt <- 0.5 else cex.pt <- 0.75\n    plt <- vector(\"list\", length=nvar)\n    \n    # So that we can reference the plots by the variable name\n    names(plt) <- colnames(xvar)\n    for (k in 1:nvar) {\n      x <- xvar[, k]\n      x.uniq <- unique(x)\n      n.x <- length(x.uniq)\n      if (!is.factor(x)) {\n        if (grepl(\"surv\", object$family)) {\n          dta<- as.data.frame(cbind(x, yhat, cens))\n          plt[[k]] <- ggplot(dta)+geom_point(aes(x=x, y=yhat, color=cens), pch = 16)+theme_bw()+\n            labs(x=colnames(xvar)[k], y=ylabel)+\n            scale_fill_brewer(type=\"qual\",palette=\"Set1\", na.value = \"lightgrey\", labels=c(\"Dead\", \"Cens\"))+\n            guides(fill=guide_legend(title=\"Events\")) + geom_smooth(aes(x=x, y=yhat), col = 2, lwd=3) \n        }else{\n          dta<- as.data.frame(cbind(x, yhat))\n          plt[[k]] <- ggplot(dta)+geom_point(aes(x=x, y=yhat), pch = 16)+theme_bw()+\n            labs(x=colnames(xvar)[k], y=ylabel)+\n            geom_smooth(aes(x=x, y=yhat), col = 2)\n        }\n        \n      }\n      else {\n        if (is.factor(x)) x <- factor(x, exclude = NULL)\n        \n        dta<- as.data.frame(cbind(x, yhat))\n        plt[[k]] <- ggplot(dta) +geom_boxplot(aes(y=yhat, x=factor(x)), notch = TRUE, fill=\"bisque\")+\n          theme_bw()+\n          labs(x=colnames(xvar)[k], y=ylabel)\n      }\n      if (grepl(\"surv\", object$family)) {\n        plt[[k]]<- plt[[k]] + scale_y_continuous(breaks=seq(0,100,5)) +\n          coord_cartesian(ylim=c(0,100))\n      }\n      show(plt[[k]])\n    }\n  }\n  ##--------------------------------------------------------------------------------\n  ##\n  ## Partial Plots\n  ##\n  ##--------------------------------------------------------------------------------\n  else {\n    nvar <- length(object$partial)\n    plt <- vector(\"list\", length=nvar)\n    \n    for (k in 1:nvar) {\n      x <- object$partial[[k]]$x\n      yhat <- object$partial[[k]]$yhat\n      yhat.se <- object$partial[[k]]$yhat.se\n      x.uniq <- object$partial[[k]]$xhat\n      name <- object$partial[[k]]$name\n      \n      # So that we can reference the plots by the variable name\n      name(plt[[k]]) <- name\n      \n      n.x <- object$partial[[k]]$n.x\n      if (n.x > 25) cex.pt <- 0.5 else cex.pt <- 0.75\n      factor.x <- !(length(x.uniq) == length(yhat))\n      \n      if (!factor.x) {\n        dta <- as.data.frame(cbind(x.uniq=x.uniq, yhat=yhat, yhat.se=yhat.se))\n        plt[[k]] <- ggplot(dta)+ geom_point(aes(x=x.uniq, y=yhat), col=2, pch=16)+\n          labs(x=name, y=ylabel) + theme_bw()+\n          geom_rug(aes(x=x), data=as.data.frame(cbind(x=x)),side=\"b\")\n        \n        if (!is.na(yhat.se) && any(yhat.se > 0)) {\n          if (smooth.lines) {\n            plt[[k]] <- plt[[k]] +\n              geom_smooth(aes(x=x.uniq, y=yhat + 2 * yhat.se), lty=3, col=2, se=FALSE)+\n              geom_smooth(aes(x=x.uniq, y=yhat - 2 * yhat.se), lty=3, col=2, se=FALSE)\n          }\n          else {\n            plt[[k]] <- plt[[k]] +\n              geom_line(aes(x=x.uniq, y=yhat + 2 * yhat.se), lty=3, col=2)+\n              geom_line(aes(x=x.uniq, y=yhat - 2 * yhat.se), lty=3, col=2)\n          }\n        }\n        if (smooth.lines) {\n          plt[[k]] <- plt[[k]] +\n            geom_smooth(aes(x=x.uniq, y=yhat), lty=2)\n        }\n        else {\n          plt[[k]] <- plt[[k]] +\n            geom_line(aes(x=x.uniq, y=yhat), lty=2)\n        }\n      }\n      else {\n        n <- length(x)\n        \n        dta<- as.data.frame(cbind(x=rep(x.uniq, rep(n, n.x)), yhat))\n        plt[[k]] <- ggplot(dta) +geom_boxplot(aes(y=yhat, x=factor(x)), notch = TRUE, fill=\"bisque\")+\n          theme_bw()+\n          labs(x=name, y=ylabel)\n      }\n      if (grepl(\"surv\", object$family)) {\n        plt[[k]]<- plt[[k]] + scale_y_continuous(breaks=seq(0,100,5)) +\n          coord_cartesian(ylim=c(0,100))\n      }\n      show(plt[[k]])\n    }\n  }\n  \n  # return the ggplot objects. Useful for customizing the graphics.\n  invisible(plt)\n}\n\nggplot.variable <- ggplot.variable.rfsrc\n",
    "created" : 1357309003309.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "186194601",
    "id" : "BBD9C4A6",
    "lastKnownWriteTime" : 1357310432,
    "path" : "~/devel/ggrfsrc/R/ggplot.variable.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}